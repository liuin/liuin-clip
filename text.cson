var coffee, vm,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

coffee = require('coffee-script');

vm = require('vm');

module.exports = {
  activate: function() {
    return this.disposable = atom.commands.add('atom-text-editor', 'eval-javascript:eval-javascript', (function(_this) {
      return function() {
        var code, editor, scope;
        atom.openDevTools();
        editor = atom.workspace.getActiveTextEditor();
        if (!editor) {
          console.warn("No text editor is active.");
          return;
        }
        code = editor.getSelectedText();
        if (code) {
          scope = _this.matchingCursorScopeInEditor(editor);
        } else {
          return console.error("No code selected");
        }
        return _this.runCodeInScope(code, scope, function(error, warning, result) {
          if (error) {
            return console.error(error.toString().replace(/evalmachine.\S*/, ''));
          } else if (warning) {
            return console.warn(warning);
          } else {
            return console.log(">", result);
          }
        });
      };
    })(this));
  },
  deactivate: function() {
    var ref;
    return (ref = this.disposable) != null ? ref.dispose() : void 0;
  },
  runCodeInScope: function(code, scope, callback) {
    var error, result;
    switch (scope) {
      case 'source.coffee':
        try {
          result = vm.runInThisContext(coffee.compile(code, {
            bare: true
          }));
          return callback(null, null, result);
        } catch (_error) {
          error = _error;
          return callback(error);
        }
        break;
      default:
        try {
          result = vm.runInThisContext(code);
          return callback(null, null, result);
        } catch (_error) {
          error = _error;
          return callback(error);
        }
    }
  },
  matchingCursorScopeInEditor: function(editor) {
    var i, len, ref, scope;
    ref = ['source.coffee', 'source.js', 'source.js.embedded.html'];
    for (i = 0, len = ref.length; i < len; i++) {
      scope = ref[i];
      if (indexOf.call(editor.getLastCursor().getScopeDescriptor().scopes, scope) >= 0) {
        return scope;
      }
    }
  },
  scopeInEditor: function(editor) {
    var ref;
    return (ref = editor.getGrammar()) != null ? ref.scopeName : void 0;
  }
};
